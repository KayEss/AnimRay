/*
    Copyright 2010, Kirit Saelensminde.
    http://www.kirit.com/AnimRay

    This file is part of AnimRay.

    AnimRay is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    AnimRay is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with AnimRay.  If not, see <http://www.gnu.org/licenses/>.
*/


#ifndef ANIMRAY_DETAIL_ARRAY_BASED
#define ANIMRAY_DETAIL_ARRAY_BASED
#pragma once


#include <fost/core>
#include <boost/array.hpp>


namespace animray {


    namespace detail {


        /// Non-templated base class used for matching
        struct array_based_base_class {};

        /// Used for implementations that are actually just a vector
        template< typename D, std::size_t S >
        struct array_based : array_based_base_class {
            /// The type of the values
            typedef D value_type;
            /// Type to use as a parameter
            typedef const D &const_value_parameter_type;
            /// The type of the array
            typedef boost::array< D, S > array_type;

            /// The actual data
            array_type array;

            /// Default construct the array members
            array_based()
            : array() {
            }

            /// Turn the array into a JSON array
            fostlib::json to_json() const {
                fostlib::json r;
                for ( std::size_t i = 0; i < array.size(); ++i )
                    fostlib::jcursor().push_back( r,
                        fostlib::coerce< fostlib::json >( array[i] )
                    );
                return r;
            }
        };


    }


}


namespace fostlib {
    template< typename T >
    struct coercer<
        fostlib::json, T,
        typename boost::enable_if<
            boost::is_base_of< animray::detail::array_based_base_class, T >
        >::type
    > {
        fostlib::json coerce( const T &a ) {
            return a.to_json();
        }
    };
}


namespace std {
    template< typename D, std::size_t S >
    fostlib::ostream &operator << (
        fostlib::ostream &o, const animray::detail::array_based< D, S > &a
    ) {
        o << "(";
        for ( std::size_t i = 0; i < a.array.size(); ++i ) {
            if ( i != 0 )
                o << ", ";
            o << a.array[i];
        }
        return o << ")";
    }
}


#endif // ANIMRAY_DETAIL_ARRAY_BASED
