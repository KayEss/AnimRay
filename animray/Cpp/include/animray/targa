/*
    Copyright 1995-2010, Kirit Saelensminde.
    http://www.kirit.com/AnimRay

    This file is part of AnimRay.

    AnimRay is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    AnimRay is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with AnimRay.  If not, see <http://www.gnu.org/licenses/>.
*/


#ifndef ANIMRAY_TARGA_HPP
#define ANIMRAY_TARGA_HPP
#pragma once


#include <animray/rgb>
#include <animray/rgba>

#include <boost/filesystem/fstream.hpp>


namespace animray {


    /// A Targa file input/output handler templated on the colour pixel type
    template< typename C >
    class targa {
        typedef std::vector< C > row_type;
        typedef std::vector< row_type > rows_type;
        rows_type rows;
        public:
            /// Construct an empty targa of the given size
            targa( uint16_t width, uint16_t height, const C &colour = C() )
            : rows( height, row_type(width, colour)), width( width ), height( height ) {
            }

            /// The width and height of the image
            fostlib::accessors< const uint16_t > width, height;

            /// Save the image, returns the number of bytes written
            void save( const boost::filesystem::wpath &filename ) const;

            /// Return a mutable row
            row_type &operator [] ( typename rows_type::size_type r ) {
                return rows[r];
            }
    };


    template<>
    void targa< unsigned char >::save(
        const boost::filesystem::wpath &filename
    ) const {
        boost::filesystem::ofstream file( filename, std::ios::binary );
        // Header
        file.put(0); // 0 identsize
        file.put(0); // Has no colour map
        file.put(3); // Uncompressed grayscale image (as this is unsigned char)
        file.put(0); file.put(0); // Colour map offset
        file.put(0); file.put(0); // Colour map indexes
        file.put(0); // Colour map bits per pixel
        file.put(0); file.put(0); // X origin
        file.put(0); file.put(0); // Y origin
        file.write(reinterpret_cast< const char * >(&width()), 2);
        file.write(reinterpret_cast< const char * >(&height()), 2);
        file.put(8); // 8 bit pixels
        file.put(0); // Image data starts bottom left with zero alpha channel
        // Image data
        for ( rows_type::const_iterator r(rows.begin()), re(rows.end()); r != re; ++r )
            for ( row_type::const_iterator c(r->begin()), ce(r->end()); c != ce; ++c )
                file.put(*c);
        // Footer (for Targa 2)
        file.put(0); file.put(0); // Targa 2 extension data size
        file << "TRUEVISION-XFILE.";
    }


}


#endif // ANIMRAY_TARGA_HPP
