/*
    Copyright 1995-2010, Kirit Saelensminde. http://www.kirit.com/AnimRay
    Distributed under the Boost Software License, Version 1.0.
    See accompanying file LICENSE_1_0.txt or copy at
        http://www.boost.org/LICENSE_1_0.txt
*/


#ifndef ANIMRAY_LINE_HPP
#define ANIMRAY_LINE_HPP
#pragma once


#include <animray/homogeneous>


namespace animray {


    /// Represents part of a line through 3D space
    template< typename D >
    class line {
        public:
            /// The value type of the line
            typedef D value_type;
            /// The type of the end points
            typedef homogeneous< value_type > end_type;

            /// Construct a null line
            line() {
            }
            /// Construct a line between two locations
            line( const end_type &from, const end_type &to )
            : from( from ), to( to ) {
            }

            /// The start and end of the line. It is directional
            fostlib::accessors< end_type > from, to;

            /// Compare for equality
            bool operator == ( const line &r ) const {
                return to() == r.to() && from() == r.from();
            }
            /// Compare for inequality
            bool operator != ( const line &r ) const {
                return ! ( *this == r );
            }

            /// Returns the square of the length of the line
            value_type length_squared() const {
                double  dx, dy, dz;
                dx  = to().x() - from().x();
                dy  = to().y() - from().y();
                dz  = to().z() - from().z();
                return dx * dx + dy * dy + dz * dz;
            }
    };


}


#endif // ANIMRAY_LINE_HPP
