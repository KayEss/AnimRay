/*
    Copyright 1995-2010, Kirit Saelensminde. http://www.kirit.com/AnimRay
    Distributed under the Boost Software License, Version 1.0.
    See accompanying file LICENSE_1_0.txt or copy at
        http://www.boost.org/LICENSE_1_0.txt
*/


#ifndef ANIMRAY_MATRIX_HPP
#define ANIMRAY_MATRIX_HPP
#pragma once


#include <animray/homogeneous>


namespace animray {


    /// This 4D matrix class represents transformations in 3D space
    template< typename D, typename CR = const D & >
    class matrix : private detail::array_based< D, 16, CR > {
        typedef detail::array_based< D, 16, CR > superclass;
        public:
            typedef typename superclass::value_type value_type;
            typedef typename superclass::array_type array_type;
            typedef typename
                superclass::const_value_parameter_type
                const_value_parameter_type
            ;

            /// Construct a transform matrix that does nothing
            matrix() {
                // Set the values on the leading diaganol to 1
                superclass::array.c_array()[0] = 1;
                superclass::array.c_array()[5] = 1;
                superclass::array.c_array()[10] = 1;
                superclass::array.c_array()[15] = 1;
            }

            /// Compare for equality
            bool operator == ( const matrix &r ) const {
                return superclass::array == r.array;
            }
            /// Compare for inequality
            bool operator != ( const matrix &r ) const {
                return superclass::array != r.array;
            }

            template< typename T >
            friend fostlib::json fostlib::coercer<
                fostlib::json, T
            >::coerce( const T & );
    };


}


#endif // ANIMRAY_MATRIX_HPP
