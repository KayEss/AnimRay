/*
    Copyright 1995-2010, Kirit Saelensminde. http://www.kirit.com/AnimRay
    Distributed under the Boost Software License, Version 1.0.
    See accompanying file LICENSE_1_0.txt or copy at
        http://www.boost.org/LICENSE_1_0.txt
*/


#ifndef ANIMRAY_HOMOGENEOUS_HPP
#define ANIMRAY_HOMOGENEOUS_HPP
#pragma once


#include <animray/detail/array_based>


namespace animray {
    template< typename D >
    class homogeneous;
}


namespace std {
    template< typename D >
    fostlib::ostream &operator << (
        fostlib::ostream &o, const animray::homogeneous< D > &h
    );
}


namespace animray {


    /// Homogenous coordinates store a location or a vector
    template < typename D >
    class homogeneous : private detail::array_based< D, 4 > {
        typedef detail::array_based< D, 4 > superclass;
        public:
            typedef typename superclass::value_type value_type;
            typedef typename superclass::array_type array_type;
            typedef typename
                superclass::const_value_parameter_type
                const_value_parameter_type
            ;

            /// Return the 4 underlying coordinates
            const array_type &array() const {
                return superclass::array;
            }

            /// The x coordinate
            value_type x() const {
                return superclass::array[0] / superclass::array[3];
            }
            /// The y coordinate
            value_type y() const {
                return superclass::array[1] / superclass::array[3];
            }
            /// The z coordinate
            value_type z() const {
                return superclass::array[2] / superclass::array[3];
            }

            /// Constructor makes a point at the origin
            homogeneous() {
                superclass::array.c_array()[3] = 1;
            }
            /// Constructor for making a point at a given location
            homogeneous(
                const_value_parameter_type x,
                const_value_parameter_type y,
                const_value_parameter_type z,
                const_value_parameter_type h = 1
            ) {
                superclass::array.c_array()[0] = x;
                superclass::array.c_array()[1] = y;
                superclass::array.c_array()[2] = z;
                superclass::array.c_array()[3] = h;
            }

            /// Compare for equality
            bool operator == ( const homogeneous &r ) const {
                return superclass::array == r.superclass::array;
            }
            /// Compare for inequality
            bool operator != ( const homogeneous &r ) const {
                return superclass::array != r.superclass::array;
            }

            /// Binary subtraction
            homogeneous operator - ( const homogeneous &r ) const {
                return homogeneous( x() - r.x(), y() - r.y(), z() - r.z() );
            }

            /// Return the homogeneous with unit length
            homogeneous unit() const {
                return homogeneous(
                    superclass::array[0], superclass::array[1], superclass::array[2],
                    std::sqrt( dot(*this) )
                );
            }

            /// The dot product of two homogeneous co-ordinates
            D dot( const homogeneous &r ) const {
                return (
                    superclass::array[0] * r.superclass::array[0]
                    + superclass::array[1] * r.superclass::array[1]
                    + superclass::array[2] * r.superclass::array[2]
                ) / superclass::array[3] * r.superclass::array[3];
            }

            template< typename T >
            friend fostlib::json fostlib::coercer<
                fostlib::json, T
            >::coerce( const T & );
            friend fostlib::ostream &std::operator << <> (
                fostlib::ostream &, const homogeneous &
            );
    };


}


namespace std {
    template< typename D >
    fostlib::ostream &operator << (
        fostlib::ostream &o, const animray::homogeneous< D > &h
    ) {
        return o << typename animray::homogeneous< D >::superclass( h );
    }
}


#endif // ANIMRAY_HOMOGENEOUS_HPP
