/*
    Copyright 1995-2010, Kirit Saelensminde. http://www.kirit.com/AnimRay
    Distributed under the Boost Software License, Version 1.0.
    See accompanying file LICENSE_1_0.txt or copy at
        http://www.boost.org/LICENSE_1_0.txt
*/


#ifndef ANIMRAY_HOMOGENEOUS_HPP
#define ANIMRAY_HOMOGENEOUS_HPP
#pragma once


#include <fost/core>
#include <boost/array.hpp>


namespace animray {


    /// Homogenous coordinates store a location or a vector
    template < typename D, typename CR = const D & >
    class homogeneous {
        public:
            /// The type of the coordinates stored
            typedef D coord_type;
            /// Four coordinates are stored for a 3D location
            typedef boost::array< D, 4 > value_type;
            /// Type to use as a parameter
            typedef CR const_coord_parameter_type;

            /// Return the 4 underlying coordinates
            const value_type &coords() const { return value; }

            /// The x coordinate
            coord_type x() const { return value[0] / value[3]; }
            /// The y coordinate
            coord_type y() const { return value[1] / value[3]; }
            /// The z coordinate
            coord_type z() const { return value[2] / value[3]; }

            /// Constructor makes a point at the origin
            homogeneous()
            : value() {
                value.c_array()[3] = 1;
            }
            /// Constructor for making a point at a given location
            homogeneous(
                const_coord_parameter_type x,
                const_coord_parameter_type y,
                const_coord_parameter_type z
            ) {
                value[0] = x;
                value[1] = y;
                value[2] = z;
                value[3] = 1;
            }

        private:
            value_type value;
    };


}


#endif // ANIMRAY_HOMOGENEOUS_HPP
